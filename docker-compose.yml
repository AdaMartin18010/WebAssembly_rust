# WebAssembly 2.0 + Rust 1.90 Docker Compose配置
# 支持开发、测试和生产环境

version: '3.8'

services:
  # 开发环境
  wasm-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: wasm-dev
    ports:
      - "8080:8080"
      - "3000:3000"
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_BACKTRACE=1
      - CARGO_TERM_COLOR=always
      - RUST_LOG=debug
    networks:
      - wasm-network
    restart: unless-stopped

  # 测试环境
  wasm-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: wasm-test
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
    environment:
      - RUST_BACKTRACE=1
      - CARGO_TERM_COLOR=always
    networks:
      - wasm-network
    profiles:
      - testing

  # 生产环境
  wasm-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wasm-prod
    ports:
      - "80:8080"
    environment:
      - NODE_ENV=production
    networks:
      - wasm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 微服务
  wasm-microservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: microservice
    container_name: wasm-microservice
    ports:
      - "8081:8080"
    environment:
      - RUST_LOG=info
      - WASM_CACHE_SIZE=1000
    networks:
      - wasm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 边缘计算节点
  wasm-edge:
    build:
      context: .
      dockerfile: Dockerfile
      target: edge
    container_name: wasm-edge
    ports:
      - "8082:8080"
    environment:
      - NODE_ENV=production
      - EDGE_MODE=true
    networks:
      - wasm-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 数据库
  postgres:
    image: postgres:15-alpine
    container_name: wasm-postgres
    environment:
      - POSTGRES_DB=wasm_db
      - POSTGRES_USER=wasm_user
      - POSTGRES_PASSWORD=wasm_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wasm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wasm_user -d wasm_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: wasm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - wasm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: wasm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - wasm-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: wasm-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - wasm-network
    restart: unless-stopped
    profiles:
      - monitoring

  # 日志聚合
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: wasm-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - wasm-network
    restart: unless-stopped
    profiles:
      - logging

  # Kibana日志分析
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: wasm-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - wasm-network
    restart: unless-stopped
    profiles:
      - logging

  # 负载均衡器
  nginx-lb:
    image: nginx:alpine
    container_name: wasm-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - wasm-network
    restart: unless-stopped
    depends_on:
      - wasm-prod
      - wasm-microservice
    profiles:
      - production

# 网络配置
networks:
  wasm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  cargo-cache:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
