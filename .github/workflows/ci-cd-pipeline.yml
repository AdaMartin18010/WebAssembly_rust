# WebAssembly 2.0 + Rust 1.90 持续集成和持续部署流水线
# CI/CD Pipeline for WebAssembly 2.0 + Rust 1.90

name: WebAssembly 2.0 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  # 单元测试和集成测试
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
          - rust: stable
            target: wasm32-unknown-unknown
          - rust: beta
            target: x86_64-unknown-linux-gnu
          - rust: nightly
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose --target ${{ matrix.target }}

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Generate test coverage
      if: matrix.rust == 'stable'
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --verbose --out Xml --output-dir ./coverage

    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella

  # 性能基准测试
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --verbose

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

    - name: Run cargo audit
      uses: rustsec/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run cargo deny
      run: |
        cargo install cargo-deny
        cargo deny check

    - name: Run security tests
      run: cargo test security_tests --verbose

    - name: WebAssembly security scan
      run: |
        # 使用 wasmati 进行 WebAssembly 安全扫描
        cargo install wasmati
        find target -name "*.wasm" -exec wasmati scan {} \;

  # 构建和打包
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    needs: [code-quality, test, security]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: macos-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Build WebAssembly
      run: |
        cargo install wasm-pack
        cd wasm && wasm-pack build --target web --release

    - name: Create package
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/wasm dist/
        cp wasm/pkg/*.wasm dist/
        cp wasm/pkg/*.js dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: dist/

  # Docker 镜像构建
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./wasm
        push: true
        tags: |
          webassembly-2.0-service:latest
          webassembly-2.0-service:${{ github.sha }}
          webassembly-2.0-service:v${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'webassembly-2.0-service:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Kubernetes 部署
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        kubectl apply -f wasm/k8s/webassembly-deployment.yaml -n webassembly-ecosystem-staging
        kubectl rollout status deployment/wasm-service -n webassembly-ecosystem-staging

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=wasm-service -n webassembly-ecosystem-staging --timeout=300s
        # 运行冒烟测试
        curl -f http://staging.wasm.example.com/health

  # 生产部署
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        kubectl apply -f wasm/k8s/webassembly-deployment.yaml -n webassembly-ecosystem
        kubectl rollout status deployment/wasm-service -n webassembly-ecosystem

    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=wasm-service -n webassembly-ecosystem --timeout=300s
        curl -f https://wasm.example.com/health

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # 性能回归测试
  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        k6 run --out json=performance-results.json performance-tests/load-test.js

    - name: Compare performance
      run: |
        # 比较性能指标
        python scripts/compare-performance.py performance-results.json baseline-performance.json

  # 发布管理
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      run: |
        # 生成变更日志
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # 监控和告警
  monitoring:
    name: Monitoring Setup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Setup monitoring
      run: |
        # 部署 Prometheus 和 Grafana
        kubectl apply -f monitoring/prometheus.yaml -n webassembly-ecosystem
        kubectl apply -f monitoring/grafana.yaml -n webassembly-ecosystem
        
        # 配置告警规则
        kubectl apply -f monitoring/alert-rules.yaml -n webassembly-ecosystem

    - name: Verify monitoring
      run: |
        kubectl wait --for=condition=ready pod -l app=prometheus -n webassembly-ecosystem --timeout=300s
        kubectl wait --for=condition=ready pod -l app=grafana -n webassembly-ecosystem --timeout=300s

  # 清理工作
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, monitoring]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        # 清理旧的 Docker 镜像
        docker system prune -f
        
    - name: Cleanup old artifacts
      uses: geekyeggo/delete-artifact@v4
      with:
        name: |
          linux-x64
          windows-x64
          macos-x64
        failOnError: false
